from ctypes import *
import sys

dll = cdll.LoadLibrary("./utils/murmur.so")
calc_hash = dll.murmur_hash
calc_hash.restype = c_uint

lines = []
with open('OPERATORS') as f:
    lines = f.readlines()

curr = sys.argv[0]

header = f"""/* 
* Important! 
* This file is automatically generated with python {curr}
* Do not modify it!
*/ 
"""

with open("./include/wolfram/operators.h", "w") as file:
    file.write(header)
    file.write("""
#ifndef WFOPERATOR_H
#define WFOPERATOR_H

""")
    for line in lines:
        tok = line[line.find("\"")+1:line.rfind("\"")]
        hsh = hex(dll.murmur_hash(c_char_p(bytes(tok, "utf-8")), len(tok), 0xDED64))
        word = line.split()[0]
        file.write(f"const unsigned OP_{word} = {hsh};\n")

    file.write("""
const char *optostr(unsigned hash);

#endif /* WFOPERATOR_H */
""")

with open("./core/optostr.cpp", "w") as file:
    file.write(header)
    file.write("""
#include <wolfram/operators.h>


const char *optostr(unsigned hash)
{
        switch (hash) {
""")

    for line in lines:
        tok = line[line.find("\"")+1:line.rfind("\"")]
        word = line.split()[0]
        file.write(f"""        case OP_{word}: 
                return \"{tok}\";\n""")
    file.write("""        default:
                return nullptr;\n}\n}\n""")



